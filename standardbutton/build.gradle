plugins {
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.jetbrainsKotlinAndroid)
    alias(libs.plugins.dokka)
    alias(libs.plugins.sonatypePublish)
}

description "A widget library for generically defining primary/secondary/tertiary button styles."
group "cl.emilym.compose"

android {
    namespace 'cl.emilym.compose.standardbutton'
    compileSdk 34

    defaultConfig {
        minSdk 21

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    // Base
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material

    // Compose
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

centralPortal {
    username = findProperty("sonatypeUsername")
    password = findProperty("sonatypePassword")
    name = "standardbutton"
    pom {
        url = findProperty("pom.url")
        licenses {
            license {
                name = findProperty("pom.license.name")
                url = findProperty("pom.license.url")
            }
        }
        developers {
            developer {
                name = findProperty("pom.developer.name")
                email = findProperty("pom.developer.email")
            }
        }
        scm {
            connection = findProperty("pom.scm.connection")
            developerConnection = findProperty("pom.scm.developerConnection")
            url = findProperty("pom.scm.url")
        }
    }
    versionMapping {
        allVariants {
            fromResolutionOf("releaseRuntimeClasspath")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
}